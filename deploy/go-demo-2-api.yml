# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: something
# spec:
#   selector:
#     matchLabels:
#       app: something
#   template:
#     metadata:
#       labels:
#         app: something
#     spec:
#       containers:
#       - name: something
#         image: <Image>
#         resources:
#           limits:
#             memory: "128Mi"
#             cpu: "500m"
#         ports:
#         - containerPort: <Port>



apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-demo-2-api
spec:
  replicas: 3
  selector:
    matchLabels:
      type: api
      service: go-demo-2
  minReadySeconds: 1
  progressDeadlineSeconds: 60
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        type: api
        service: go-demo-2
        language: go
    spec:
      containers:
      - name: api
        image: vfarcic/go-demo-2
        env:
        - name: DB
          value: go-demo-2-db
        readinessProbe:
          httpGet:
            path: /demo/hello
            port: 8080
          periodSeconds: 1
        livenessProbe:
          httpGet:
            path: /demo/hello
            port: 8080





# Line 5-7: The spec section has a few of the fields we haven’t seen before, and a few of those we are familiar with. 
# The replicas and the selector are the same as what we used in the ReplicaSet from the previous chapter.

# Line 11: minReadySeconds defines the minimum number of seconds before Kubernetes starts considering the Pods healthy.
#  We put the value of this field to 1 second. The default value is 0, meaning that the Pods will be considered 
#  available as soon as they are ready and, when specified, livenessProbe returns OK. If in doubt, omit this field and 
#  leave it to the default value of 0. We defined it mostly for demonstration purposes.

# Line 13: The next field is revisionHistoryLimit. It defines the number of old ReplicaSets we can rollback. 
# Like most of the fields, it is set to the sensible default value of 10. We changed it to 5 and, 
# as a result, we will be able to rollback to any of the previous five ReplicaSets.

# Line 14: The strategy can be either the RollingUpdate or the Recreate type. The latter will kill all the existing 
# Pods before an update. Recreate resembles the processes we used in the past when the typical strategy for deploying
#  a new release was first to stop the existing one and then put a new one in its place. This approach inevitably leads
#   to downtime. The only case when this strategy is useful is when applications are not designed for two releases to coexist. 
#   Unfortunately, that is still more common than it should be. If you’re in doubt whether your application is like that, 
#   ask yourself the following question. Would there be an adverse effect if two different versions of my application are
#    running in parallel? If that’s the case, a Recreate strategy might be a good choice and you must be aware that you cannot 
#    accomplish zero-downtime deployments.